akka {
  loglevel = "DEBUG"
}

mySpecialConfig {
  akka {
    loglevel = "INFO"
  }
}

specialTimedAssertionsConfig {
  akka.test.single-expect-default = 0.3s
}

interceptingLogMessages {
  akka {
    loggers = ["akka.testkit.TestEventListener"]
    test {
      filter-leeway = 5s
    }
  }
}

# routers demo

routersDemo {
  akka {
    actor.deployment {
      /poolParent2 {
        router = round-robin-pool
        nr-of-instances = 5
      }
      /groupParent2 {
        router = round-robin-group
        routees.paths = ["/user/child0", "/user/child1", "/user/child2", "/user/child3", "/user/child4"]
      }
    }
  }
}

# mailbox demo



mailboxDemo {
  control-mailbox {
    mailbox-type = "akka.dispatch.UnboundedControlAwareMailbox"
  }
  support-ticket-dispatcher {
    mailbox-type = "akkaessentials.infrastructure.Mailboxes$SupportTicketPriorityMailbox"
  }
  akka.actor.deployment {
    /controlAwareActor2 {
      mailbox = control-mailbox
    }
  }
}

dispatchersDemo {
  my-dispatcher {
    type = Dispatcher
    executor = "thread-pool-executor"
    thread-pool-executor {
      fixed-pool-size = 1
    }
    throughput = 30
  }
  akka.actor.deployment {
    /rtjvm {
      dispatcher = my-dispatcher
    }
  }
}

localStores {
  akka.persistence.journal.plugin = "akka.persistence.journal.leveldb"
  akka.persistence.journal.leveldb.dir = "target/localStores/journal"

  akka.persistence.journal.leveldb.compaction-intervals {
    simple-persistent-actor = 1000
    "*" = 5000
  }

  akka.persistence.snapshot-store.plugin = "akka.persistence.snapshot-store.local"
  akka.persistence.snapshot-store.local.dir =  "target/localStores/snapshot"
}

akka.persistence.journal.plugin = "akka.persistence.journal.leveldb"
akka.persistence.journal.leveldb.dir = "target/rtjvm/journal"
akka.persistence.snapshot-store.plugin = "akka.persistence.snapshot-store.local"
akka.persistence.snapshot-store.local.dir =  "target/rtjvm/snapshots"

postgresDemo {
  akka.persistence.journal.plugin = "jdbc-journal"
  akka.persistence.snapshot-store.plugin =  "jdbc-snapshot-store"

  akka-persistence-jdbc {
    shared-databases {
      slick {
        profile = "slick.jdbc.PostgresProfile$"
        db {
          numThreads = 10
          driver = "org.postgresql.Driver"
          url = "jdbc:postgresql://localhost:5432/rtjvm"
          user = "docker"
          password = "docker"
        }
      }
    }
  }

  jdbc-journal {
    use-shared-db = "slick"
  }
  jdbc-snapshot-store {
    use-shared-db = "slick"
  }
}

cassandraDemo {
  akka.persistence.journal.plugin = "cassandra-journal"
  akka.persistence.snapshot-store.plugin =  "cassandra-snapshot-store"
}

customSerializerDemo {
  akka.persistence.journal.plugin = "cassandra-journal"
  akka.persistence.snapshot-store.plugin =  "cassandra-snapshot-store"

  akka.actor {
    serializers {
      java = "akka.serialization.JavaSerializer"
      rtjvm = "persistence.stores.UserRegistrationSerializer"
    }

    serialization-bindings {
      "persistence.stores.UserRegistered" = rtjvm
    }
  }
}

eventAdapters {
  akka.persistence.journal.plugin = "cassandra-journal"
  akka.persistence.snapshot-store.plugin =  "cassandra-snapshot-store"

  cassandra-journal {
    event-adapters {
      guitar-adapter = "persistence.advanced.EventAdapters$GuitarReadEventAdapter"
    }

    event-adapter-bindings {
      "persistence.advanced.EventAdapters$GuitarAdded" = guitar-adapter
    }
  }
}

detachingModels {
  akka.persistence.journal.plugin = "cassandra-journal"
  akka.persistence.snapshot-store.plugin =  "cassandra-snapshot-store"

  cassandra-journal {
    event-adapters {
      coupon-adapter = "persistence.advanced.ModelAdapter"
    }

    event-adapter-bindings {
      "persistence.advanced.DomainModel$CouponApplied" = coupon-adapter
      "persistence.advanced.DataModel$WrittenCouponApplied" = coupon-adapter
      "persistence.advanced.DataModel$WrittenCouponAppliedV2" = coupon-adapter
    }
  }
}

persistenceQuery {
  akka.persistence.journal.plugin = "cassandra-journal"
  akka.persistence.snapshot-store.plugin =  "cassandra-snapshot-store"

  cassandra-journal {
    event-adapters {
      playlist-adapter = "persistence.advanced.PersistenceQueryDemo$MusicStoreEventAdapter"
    }

    event-adapter-bindings {
      "persistence.advanced.PersistenceQueryDemo$PlaylistPurchased" = playlist-adapter
    }
  }
}